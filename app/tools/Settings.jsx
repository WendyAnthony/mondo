/* copyright 2018, stefano bovio @allyoucanmap. */

const React = require('react');
const { connect } = require('react-redux');
const Button = require('../containers/Button.jsx');
const settingActions = require('./actions/setting');
const settingSelectors = require('./selectors/setting');

const Component = ({
    settings = {},
    types = [
        {
            name: 'pyramid',
            data: ['M 51.374046,10.839665 L 10,69.771035 L 79.770992,89.160335 L 90,40.916005 L 51.476622,11.125935 L 51.401089,10.915135 Z M 50.088264,18.594915 L 72.862595,81.405135 L 16.908397,65.856435 Z M 55.412691,19.040995 L 86.114026,42.798165 L 77.532743,80.445335 Z']
        },
        {
            name: 'cube',
            data: ['M 35.601562,6.9208985 L 9.7734372,39.870117 L 16.660156,81.368164 L 63.818359,93.079101 L 90.226563,60.795898 L 83.476562,18.795898 Z M 37.060546,9.9169925 L 78.527343,20.202148 L 56.441406,48.674804 L 14.476562,38.727539 Z M 82.40625,23.649414 L 88.458985,60.180664 L 64.941406,88.458007 L 59.36914,52.458007 Z M 13.542968,43.68457 L 54.873046,53.64746 L 60.316406,89.333007 L 19.591796,79.219726 Z']
        },
        {
            name: 'spinner',
            data: ['M 49.612761,10 L 17.516051,26.825842 L 17.510032,26.82183 L 17.510032,26.827849 L 17.479936,26.8439 L 17.504013,26.861958 L 11.910112,69.295746 L 11.9061,69.301765 L 11.859952,69.325843 L 12.026485,69.333868 L 50.252809,89.923756 L 50.254816,90 L 50.32504,89.961878 L 50.339085,89.969904 L 50.339085,89.953852 L 81.894061,72.782905 L 82.100722,72.792937 L 81.936196,72.678572 L 81.902087,72.61236 L 88.132023,30.804575 L 88.136035,30.802568 L 88.134029,30.800562 L 88.140048,30.754414 L 88.091894,30.778491 L 49.59671,10.042135 L 49.592697,10.034109 L 49.612761,10 Z M 52.273275,12.295345 L 85.439406,30.160514 L 66.442616,40.128411 L 52.273275,12.295345 Z M 46.65931,12.516052 L 32.60634,34.86557 L 20.433387,26.264045 L 46.65931,12.516052 Z M 50.688202,15.949037 L 77.421749,67.730739 L 50.70626,49.028893 L 50.688202,15.949037 Z M 47.684591,16.364365 L 47.90931,49.030899 L 17.120787,64.438203 L 47.684591,16.364365 Z M 18.266453,30.282906 L 30.736356,39.097111 L 13.575442,65.858748 L 18.266453,30.282906 Z M 85.443419,35.852729 L 80.720305,67.55016 L 68.681782,44.682986 L 85.443419,35.852729 Z M 49.167335,51.990369 L 76.147673,70.866774 L 17.813002,67.987561 L 49.167335,51.990369 Z M 16.207865,70.70626 L 48.115972,72.301364 L 48.394864,88.04374 L 16.207865,70.70626 Z M 50.979133,71.970305 L 78.870386,73.370787 L 51.243981,88.404896 L 50.979133,71.970305 Z']
        },
        {
            name: 'icosahedron',
            data: ['M 40.458898,12.93493 L 10,37.12962 L 19.890844,80.14807 L 60.456671,87.06507 L 90,62.83027 L 80.013363,20.07682 Z M 43.844952,14.84181 L 77.255511,20.86096 L 67.754509,38.62884 Z M 42.078413,16.22073 L 64.869679,38.89616 L 30.465582,46.96703 Z M 37.794609,16.40563 L 25.98797,47.19643 L 13.025173,36.08485 Z M 79.957672,23.46065 L 88.777004,59.58457 L 70.775226,40.73844 Z M 11.296503,41.11937 L 24.689239,52.41597 L 19.536645,76.05817 Z M 69.799508,44.01753 L 87.193138,62.60307 L 59.616839,78.25017 Z M 65.159276,44.44303 L 55.054576,77.77567 L 30.347516,52.81687 Z M 27.941635,53.20457 L 53.916237,79.37287 L 22.762307,78.02297 Z M 84.623953,66.44407 L 62.340149,83.98697 L 59.991087,80.49347 Z M 26.224099,80.55247 L 54.176875,81.83227 L 57.033391,85.77567 Z']
        },
        {
            name: 'crane',
            data: ['M 10.25,9.875 L 18.625,46 L 32.023438,55.255859 L 40,67.125 L 90.75,89.25 L 82.875,53.5 L 68.870675,43.431012 L 61,31.625 Z M 16.259766,15.800781 L 59.431641,34.302734 L 63.09375,39.792969 L 50.503906,31.636719 L 33.410156,53.466797 L 23.384766,46.53125 Z M 50.505859,35.361328 L 63.177734,43.572266 L 37.837891,51.537109 Z M 66.226562,44.503906 L 78.041016,52.912109 L 84.740234,83.324219 L 41.568359,64.501953 L 34.779297,54.400391 Z']
        },
        {
            name: 'lotus',
            data: ['M 66.48091,16.438221 L 49.449857,28.9619 L 66.961315,50.104049 L 66.890472,50.115119 L 34.82304,28.561195 L 15.890294,58.571978 L 23.601097,33.270028 L 15.485164,25.154099 L 7.1699868,50.201459 L 15.436458,58.563124 L 6.4682009,57.212683 L 33.11838,83.462156 L 33.005474,83.300546 L 33.218002,83.561779 L 33.634207,83.260696 L 84.313382,74.746277 L 83.983515,74.668792 L 83.99901,74.624516 L 84.014505,74.646654 L 84.127411,74.26366 L 92.830013,49.900377 L 91.694307,48.696049 L 93.531799,42.486234 L 87.483592,44.228525 L 84.614458,41.184498 L 83.151106,45.474915 L 66.998947,50.126189 L 66.996736,50.12176 L 83.81305,37.376697 Z M 66.520763,20.874751 L 79.287963,36.298558 L 66.890472,45.694085 L 53.974945,30.099813 Z M 15.458595,29.938203 L 21.272137,35.753954 L 15.673334,54.131021 L 9.4989468,47.885784 Z M 36.111483,31.536593 L 61.869485,48.848804 L 36.456845,53.117082 L 33.618712,49.599295 L 26.837718,54.733185 L 20.842648,55.740481 Z M 90.556401,46.085935 L 90.239819,47.153004 L 89.515896,46.384802 Z M 86.343465,47.299117 L 89.276799,50.40956 L 83.485405,69.97767 L 80.009676,66.510801 L 78.223111,63.947177 L 83.638154,48.078388 Z M 82.112823,48.516728 L 77.299944,62.623302 L 69.921218,52.027875 Z M 63.675977,51.182188 L 49.193055,65.751455 L 46.049403,65.009819 L 38.327537,55.437185 Z M 66.972389,52.211623 L 76.241723,65.729317 L 75.898583,66.732184 L 79.157352,69.979885 L 80.994833,72.660842 L 52.854744,66.079102 Z M 35.22817,55.957437 L 41.701423,63.984812 L 25.394304,60.14159 L 29.693578,56.887248 Z M 71.110051,56.121261 L 76.755339,64.223907 L 76.726559,64.308032 Z M 22.3702,58.115929 L 21.048534,59.116583 L 19.118074,58.662747 Z M 9.1602276,58.866419 L 16.299856,59.942345 L 17.563952,61.755477 L 16.286572,62.722925 L 29.148973,78.554078 Z M 17.690143,60.128306 L 19.23098,60.49359 L 18.400782,61.122319 Z M 23.567886,61.525238 L 43.547768,66.27392 L 46.022834,69.3423 L 43.549978,71.786377 L 33.295487,79.229299 L 20.685468,63.708082 Z M 50.056453,66.927002 L 48.690513,68.284085 L 48.686081,68.279658 Z M 47.9046,67.309996 L 48.046286,67.343204 L 47.982085,67.407405 Z M 51.440098,68.033922 L 64.767398,71.122225 L 37.898059,81.494055 L 42.845982,76.577121 L 50.751597,70.838853 L 49.801861,69.661092 Z M 63.215499,72.742754 L 76.952361,75.403787 L 40.419621,81.540545 Z M 83.770987,74.582453 L 83.821903,74.633371 L 83.804198,74.628944 Z']
        },
        {
            name: 'butterfly',
            data: ['M 89.989393,23.893554 L 68.940975,34.998286 L 68.914957,34.977146 L 50.286196,47.465701 L 71.350875,47.847837 L 50.182125,47.465701 L 50.237416,47.51611 L 30.200437,54.64662 L 33.385993,57.497197 L 30.202061,54.653124 L 10.010607,64.949677 L 45.29403,68.154747 L 45.295653,68.156373 L 45.290774,68.175887 L 45.308658,68.169383 L 45.316792,68.175887 L 45.320047,68.16613 L 49.770718,66.557904 L 59.977835,72.059047 L 76.682903,76.106445 L 65.371655,61.168962 L 83.894718,72.720875 L 83.158088,60.432333 L 78.811486,52.022072 L 84.837864,48.090129 L 84.732167,48.088503 L 84.72241,48.080372 L 89.989393,23.893554 Z M 86.457473,27.952334 L 82.949946,44.057366 L 72.443624,35.346274 L 86.457473,27.952334 Z M 68.64177,36.250394 L 81.390502,46.816881 L 53.629482,46.314413 L 68.64177,36.250394 Z M 53.291259,48.678782 L 81.728734,49.191008 L 65.509874,59.775383 L 53.291259,48.678782 Z M 48.782041,49.082058 L 44.534634,66.572539 L 31.759883,55.139332 L 48.782041,49.082058 Z M 51.22934,49.456064 L 63.286976,60.396558 L 47.172192,66.218047 L 51.22934,49.456064 Z M 77.847201,54.298631 L 81.239273,60.860001 L 81.813292,70.429681 L 67.155502,61.289295 L 77.847201,54.298631 Z M 29.30445,57.041885 L 39.072515,65.767613 L 16.254885,63.695944 L 29.30445,57.041885 Z M 64.696817,62.812964 L 73.352621,74.241292 L 60.758369,71.189077 L 52.948148,66.979067 L 64.696817,62.812964 Z']
        },
        {
            name: 'lily',
            data: ['M 50,10 L 49.132826,12.093684 L 39.518745,35.309377 L 40.563755,40.563755 L 35.309377,39.518746 L 9.9999999,50 L 35.309377,60.481254 L 40.563755,59.436245 L 39.518745,64.690623 L 50,90 L 60.481254,64.690623 L 59.436245,59.436245 L 64.690623,60.481254 L 90,50 L 64.690623,39.518746 L 59.436245,40.563755 L 60.481254,35.309377 Z M 50,14.906041 L 58.530571,35.500046 L 57.472729,40.81859 L 50,40.81859 L 42.52727,40.81859 L 41.469428,35.500046 Z M 35.500045,41.469429 L 40.81859,42.527271 L 40.81859,50 L 40.81859,57.47273 L 35.500045,58.530572 L 14.90604,50 Z M 64.499954,41.469429 L 85.093959,50 L 64.499954,58.530572 L 59.18141,57.47273 L 59.18141,50 L 59.18141,42.527271 Z M 42.695939,42.695939 L 50,42.695939 L 57.304061,42.695939 L 57.304061,50 L 57.304061,57.304061 L 50,57.304061 L 42.695939,57.304061 L 42.695939,50 Z M 42.52727,59.18141 L 50,59.18141 L 57.472729,59.18141 L 58.530571,64.499955 L 50,85.09396 L 41.469428,64.499955 Z']
        },
        {
            name: 'flexicube',
            data: ['M 40.658203,9.3144531 L 6.7167969,21.775391 L 6.875,59.375 L 32.908203,75.367188 L 58.958984,66.027344 L 59.375,92 L 93.5,79 L 92.876953,41.880859 L 40.638672,9.4863281 Z M 38.527344,11.189453 L 35.667969,35.146484 L 30.722656,37.294922 L 8.8496094,22.085938 Z M 42.132812,11.298828 L 64.322266,25.136719 L 39.34375,34.904297 Z M 9.5136719,25.160156 L 34.482422,41.78125 L 9.6289062,55.974609 Z M 65.792969,28.201172 L 87.549364,41.262179 L 59.599609,52.146484 L 37.423828,39.25 Z M 38.568359,44.582031 L 57.25,55.181641 L 57.158203,64.763672 L 35,72.917969 Z M 34.09375,45.4375 L 30.757812,71.875 L 10.15625,59.220703 Z M 89.744141,46.517578 L 90.25,76.699219 L 62.601562,87.232422 L 62.5,56.949219 Z']
        }
    ],
    update = () => {},
    inputs = [
        {
            label: 'Background Color',
            param: 'backgroundColor',
            type: 'text'
        },
        {
            label: 'Print Scale Ratio',
            param: 'printScale',
            type: 'number'
        },
        {
            label: 'Print Zoom',
            param: 'printZoom',
            type: 'number'
        }
    ],
    checks = [
        {
            label: 'Show Graticule',
            param: 'showGraticule'
        }
    ]
}) => (
        <div className="tool-container">
            <div className="head">
                <div>Settings</div>
            </div>
            <div className="body">
                <div className="settings-types">
                    {types.map(({data, name}) => (
                        <Button
                            key={name}
                            active={name === settings.type}
                            className="select-type"
                            onClick={() => update('type', name)}>
                            <svg fill="#333333" fillRule="nonzero" viewBox="0 0 100 100">
                                {data.map((d, k) => <path key={k} d={d}/>)}
                            </svg>
                        </Button>
                    ))}
                </div>
                <div className="hr"/>
                <div className="form">
                {inputs.map(({param, label, type}) => (
                    <div key={param}>
                        <small>{label}</small>
                        <input
                            type={type}
                            value={settings[param]}
                            onChange={event => update(param, event.target.value)}/>
                    </div>))}
                </div>
                <div className="hr"/>
                {checks.map(({param, label}) => (
                    <div
                        key={param}
                        className="row-input">
                        <Button
                            active={settings[param]}
                            onClick={() => update(param, !settings[param])}>
                            {settings[param] ? 'Q' : '0'}
                        </Button>
                        <small>{label}</small>
                    </div>
                ))}
            </div>
        </div>
    );

module.exports = {
    icon: '8',
    position: 'panel',
    Tool: connect(state => ({
        settings: settingSelectors.setting(state)
    }), {
        update: settingActions.updateSettings
    })(Component),
    tooltip: 'Settings'
};
